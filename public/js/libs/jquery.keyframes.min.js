/**
 * StyleFix 1.0.3 & PrefixFree 1.0.7
 * @author Lea Verou
 * MIT license
 */

(function() {
  function t(e, t) {
    return [].slice.call((t || document).querySelectorAll(e));
  }
  if (!window.addEventListener) return;
  var e = (window.StyleFix = {
    link: function(t) {
      try {
        if (t.rel !== 'stylesheet' || t.hasAttribute('data-noprefix')) return;
      } catch (n) {
        return;
      }
      const r = t.href || t.getAttribute('data-href');
      const i = r.replace(/[^\/]+$/, '');
      const s = (/^[a-z]{3,10}:/.exec(i) || [''])[0];
      const o = (/^[a-z]{3,10}:\/\/[^\/]+/.exec(i) || [''])[0];
      const u = /^([^?]*)\??/.exec(r)[1];
      const a = t.parentNode;
      let f = new XMLHttpRequest();
      let l;
      f.onreadystatechange = function() {
        f.readyState === 4 && l();
      };
      l = function() {
        let n = f.responseText;
        if (
          n &&
          t.parentNode &&
          (!f.status || f.status < 400 || f.status > 600)
        ) {
          n = e.fix(n, !0, t);
          if (i) {
            n = n.replace(/url\(\s*?((?:"|')?)(.+?)\1\s*?\)/gi, function(
              e,
              t,
              n
            ) {
              return /^([a-z]{3,10}:|#)/i.test(n)
                ? e
                : /^\/\//.test(n)
                ? 'url("' + s + n + '")'
                : /^\//.test(n)
                ? 'url("' + o + n + '")'
                : /^\?/.test(n)
                ? 'url("' + u + n + '")'
                : 'url("' + i + n + '")';
            });
            const r = i.replace(/([\\\^\$*+[\]?{}.=!:(|)])/g, '\\$1');
            n = n.replace(
              RegExp('\\b(behavior:\\s*?url\\(\'?"?)' + r, 'gi'),
              '$1'
            );
          }
          const l = document.createElement('style');
          l.textContent = n;
          l.media = t.media;
          l.disabled = t.disabled;
          l.setAttribute('data-href', t.getAttribute('href'));
          a.insertBefore(l, t);
          a.removeChild(t);
          l.media = t.media;
        }
      };
      try {
        f.open('GET', r);
        f.send(null);
      } catch (n) {
        if (typeof XDomainRequest != 'undefined') {
          f = new XDomainRequest();
          f.onerror = f.onprogress = function() {};
          f.onload = l;
          f.open('GET', r);
          f.send(null);
        }
      }
      t.setAttribute('data-inprogress', '');
    },
    styleElement: function(t) {
      if (t.hasAttribute('data-noprefix')) return;
      const n = t.disabled;
      t.textContent = e.fix(t.textContent, !0, t);
      t.disabled = n;
    },
    styleAttribute: function(t) {
      let n = t.getAttribute('style');
      n = e.fix(n, !1, t);
      t.setAttribute('style', n);
    },
    process: function() {
      t('link[rel="stylesheet"]:not([data-inprogress])').forEach(StyleFix.link);
      t('style').forEach(StyleFix.styleElement);
      t('[style]').forEach(StyleFix.styleAttribute);
    },
    register: function(t, n) {
      (e.fixers = e.fixers || []).splice(
        n === undefined ? e.fixers.length : n,
        0,
        t
      );
    },
    fix: function(t, n, r) {
      for (let i = 0; i < e.fixers.length; i++) t = e.fixers[i](t, n, r) || t;
      return t;
    },
    camelCase: function(e) {
      return e
        .replace(/-([a-z])/g, function(e, t) {
          return t.toUpperCase();
        })
        .replace('-', '');
    },
    deCamelCase: function(e) {
      return e.replace(/[A-Z]/g, function(e) {
        return '-' + e.toLowerCase();
      });
    },
  });
  (function() {
    setTimeout(function() {
      t('link[rel="stylesheet"]').forEach(StyleFix.link);
    }, 10);
    document.addEventListener('DOMContentLoaded', StyleFix.process, !1);
  })();
})();
(function(e) {
  function t(e, t, r, i, s) {
    e = n[e];
    if (e.length) {
      const o = RegExp(t + '(' + e.join('|') + ')' + r, 'gi');
      s = s.replace(o, i);
    }
    return s;
  }
  if (!window.StyleFix || !window.getComputedStyle) return;
  var n = (window.PrefixFree = {
    prefixCSS: function(e, r, i) {
      const s = n.prefix;
      n.functions.indexOf('linear-gradient') > -1 &&
        (e = e.replace(
          /(\s|:|,)(repeating-)?linear-gradient\(\s*(-?\d*\.?\d*)deg/gi,
          function(e, t, n, r) {
            return t + (n || '') + 'linear-gradient(' + (90 - r) + 'deg';
          }
        ));
      e = t('functions', '(\\s|:|,)', '\\s*\\(', '$1' + s + '$2(', e);
      e = t('keywords', '(\\s|:)', '(\\s|;|\\}|$)', '$1' + s + '$2$3', e);
      e = t('properties', '(^|\\{|\\s|;)', '\\s*:', '$1' + s + '$2:', e);
      if (n.properties.length) {
        const o = RegExp('\\b(' + n.properties.join('|') + ')(?!:)', 'gi');
        e = t(
          'valueProperties',
          '\\b',
          ':(.+?);',
          function(e) {
            return e.replace(o, s + '$1');
          },
          e
        );
      }
      if (r) {
        e = t('selectors', '', '\\b', n.prefixSelector, e);
        e = t('atrules', '@', '\\b', '@' + s + '$1', e);
      }
      e = e.replace(RegExp('-' + s, 'g'), '-');
      e = e.replace(/-\*-(?=[a-z]+)/gi, n.prefix);
      return e;
    },
    property: function(e) {
      return (n.properties.indexOf(e) >= 0 ? n.prefix : '') + e;
    },
    value: function(e, r) {
      e = t('functions', '(^|\\s|,)', '\\s*\\(', '$1' + n.prefix + '$2(', e);
      e = t('keywords', '(^|\\s)', '(\\s|$)', '$1' + n.prefix + '$2$3', e);
      n.valueProperties.indexOf(r) >= 0 &&
        (e = t(
          'properties',
          '(^|\\s|,)',
          '($|\\s|,)',
          '$1' + n.prefix + '$2$3',
          e
        ));
      return e;
    },
    prefixSelector: function(e) {
      return e.replace(/^:{1,2}/, function(e) {
        return e + n.prefix;
      });
    },
    prefixProperty: function(e, t) {
      const r = n.prefix + e;
      return t ? StyleFix.camelCase(r) : r;
    },
  });
  (function() {
    const e = {};
    const t = [];
    const r = {};
    const i = getComputedStyle(document.documentElement, null);
    const s = document.createElement('div').style;
    const o = function(n) {
      if (n.charAt(0) === '-') {
        t.push(n);
        const r = n.split('-');
        const i = r[1];
        e[i] = ++e[i] || 1;
        while (r.length > 3) {
          r.pop();
          const s = r.join('-');
          u(s) && t.indexOf(s) === -1 && t.push(s);
        }
      }
    };
    var u = function(e) {
      return StyleFix.camelCase(e) in s;
    };
    if (i.length > 0) for (var a = 0; a < i.length; a++) o(i[a]);
    else for (var f in i) o(StyleFix.deCamelCase(f));
    let l = { uses: 0 };
    for (const c in e) {
      const h = e[c];
      l.uses < h && (l = { prefix: c, uses: h });
    }
    n.prefix = '-' + l.prefix + '-';
    n.Prefix = StyleFix.camelCase(n.prefix);
    n.properties = [];
    for (var a = 0; a < t.length; a++) {
      var f = t[a];
      if (f.indexOf(n.prefix) === 0) {
        const p = f.slice(n.prefix.length);
        u(p) || n.properties.push(p);
      }
    }
    n.Prefix == 'Ms' &&
      !('transform' in s) &&
      !('MsTransform' in s) &&
      'msTransform' in s &&
      n.properties.push('transform', 'transform-origin');
    n.properties.sort();
  })();
  (function() {
    function i(e, t) {
      r[t] = '';
      r[t] = e;
      return !!r[t];
    }
    const e = {
      'linear-gradient': { property: 'backgroundImage', params: 'red, teal' },
      calc: { property: 'width', params: '1px + 5%' },
      element: { property: 'backgroundImage', params: '#foo' },
      'cross-fade': {
        property: 'backgroundImage',
        params: 'url(a.png), url(b.png), 50%',
      },
    };
    e['repeating-linear-gradient'] = e['repeating-radial-gradient'] = e[
      'radial-gradient'
    ] = e['linear-gradient'];
    const t = {
      initial: 'color',
      'zoom-in': 'cursor',
      'zoom-out': 'cursor',
      box: 'display',
      flexbox: 'display',
      'inline-flexbox': 'display',
      flex: 'display',
      'inline-flex': 'display',
      grid: 'display',
      'inline-grid': 'display',
      'min-content': 'width',
    };
    n.functions = [];
    n.keywords = [];
    var r = document.createElement('div').style;
    for (const s in e) {
      const o = e[s];
      var u = o.property;
      const a = s + '(' + o.params + ')';
      !i(a, u) && i(n.prefix + a, u) && n.functions.push(s);
    }
    for (const f in t) {
      var u = t[f];
      !i(f, u) && i(n.prefix + f, u) && n.keywords.push(f);
    }
  })();
  (function() {
    function s(e) {
      i.textContent = e + '{}';
      return !!i.sheet.cssRules.length;
    }
    const t = {
      ':read-only': null,
      ':read-write': null,
      ':any-link': null,
      '::selection': null,
    };
    const r = { keyframes: 'name', viewport: null, document: 'regexp(".")' };
    n.selectors = [];
    n.atrules = [];
    var i = e.appendChild(document.createElement('style'));
    for (const o in t) {
      var u = o + (t[o] ? '(' + t[o] + ')' : '');
      !s(u) && s(n.prefixSelector(u)) && n.selectors.push(o);
    }
    for (const a in r) {
      var u = a + ' ' + (r[a] || '');
      !s('@' + u) && s('@' + n.prefix + u) && n.atrules.push(a);
    }
    e.removeChild(i);
  })();
  n.valueProperties = ['transition', 'transition-property'];
  e.className += ' ' + n.prefix;
  StyleFix.register(n.prefixCSS);
})(document.documentElement);

(function() {
  let e = !1;
  let n = 'animation';
  let t = (prefix = '');
  const i = ['Webkit', 'Moz', 'O', 'ms', 'Khtml'];
  $(document).ready(function() {
    const o = document.body.style;
    if ((void 0 !== o.animationName && (e = !0), e === !1))
      for (let a = 0; a < i.length; a++)
        if (void 0 !== o[i[a] + 'AnimationName']) {
          (prefix = i[a]),
            (n = prefix + 'Animation'),
            (t = '-' + prefix.toLowerCase() + '-'),
            (e = !0);
          break;
        }
  });
  const o = function(e, n) {
    return (
      $.keyframe.debug && console.log(e + ' ' + n),
      $('<style>' + n + '</style>')
        .attr({ class: 'keyframe-style', id: e, type: 'text/css' })
        .appendTo('head')
    );
  };
  $.keyframe = {
    debug: !1,
    getVendorPrefix: function() {
      return t;
    },
    isSupported: function() {
      return e;
    },
    generate: function(e) {
      const i = e.name || '';
      let a = '@' + t + 'keyframes ' + i + ' {';
      for (const r in e)
        if ('name' !== r && 'media' !== r && 'complete' !== r) {
          a += r + ' {';
          for (const s in e[r]) a += s + ':' + e[r][s] + ';';
          a += '}';
        }
      window.PrefixFree ? (a = PrefixFree.prefixCSS(a + '}')) : (a += '}'),
        e.media && (a = '@media ' + e.media + '{' + a + '}');
      const f = $('style#' + e.name);
      if (f.length > 0) {
        f.html(a);
        const l = $('*').filter(function() {
          return this.style[n + 'Name'] === i;
        });
        l.each(function() {
          const e = $(this);
          const n = e.data('keyframeOptions');
          e.resetKeyframe(function() {
            e.playKeyframe(n);
          });
        });
      } else o(i, a);
    },
    define: function(e) {
      if (e.length)
        for (let n = 0; n < e.length; n++) {
          const t = e[n];
          this.generate(t);
        }
      else this.generate(e);
    },
  };
  const a = 'animation-play-state';
  const r = 'running';
  ($.fn.resetKeyframe = function(e) {
    $(this)
      .css(t + a, r)
      .css(t + 'animation', 'none');
    e && setTimeout(e, 1);
  }),
    ($.fn.pauseKeyframe = function() {
      $(this).css(t + a, 'paused');
    }),
    ($.fn.resumeKeyframe = function() {
      $(this).css(t + a, r);
    }),
    ($.fn.playKeyframe = function(e, n) {
      const i = function(e) {
        return (
          (e = $.extend(
            {
              duration: '0s',
              timingFunction: 'ease',
              delay: '0s',
              iterationCount: 1,
              direction: 'normal',
              fillMode: 'forwards',
            },
            e
          )),
          [
            e.name,
            e.duration,
            e.timingFunction,
            e.delay,
            e.iterationCount,
            e.direction,
            e.fillMode,
          ].join(' ')
        );
      };
      let o = '';
      if ($.isArray(e)) {
        for (var s = [], f = 0; f < e.length; f++)
          s.push('string' == typeof e[f] ? e[f] : i(e[f]));
        o = s.join(', ');
      } else o = 'string' == typeof e ? e : i(e);
      const l = t + 'animation';
      const m = ['webkit', 'moz', 'MS', 'o', ''];
      !n && e.complete && (n = e.complete);
      const c = function(e, n, t) {
        for (let i = 0; i < m.length; i++) {
          m[i] || (n = n.toLowerCase());
          const o = m[i] + n;
          e.off(o).on(o, t);
        }
      };
      return (
        this.each(function() {
          const i = $(this)
            .addClass('boostKeyframe')
            .css(t + a, r)
            .css(l, o)
            .data('keyframeOptions', e);
          if ($.keyframe.debug) {
            console.group(),
              t && console.log('Vendor Prefix: ' + t),
              console.log('Style Applied: ' + o);
            const s = i.css(l);
            console.log('Rendered Style: ' + (s ? s : i[0].style.animation)),
              console.groupEnd();
          }
          n && (c(i, 'AnimationIteration', n), c(i, 'AnimationEnd', n));
        }),
        this
      );
    }),
    o('boost-keyframe', ' .boostKeyframe{' + t + 'transform:scale3d(1,1,1);}');
}.call(this));
